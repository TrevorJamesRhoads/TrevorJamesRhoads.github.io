<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Creative Writing Engine - Trevor James Rhoads</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #0891b2;
            --secondary: #dc2626;
            --dark: #1a1a2e;
            --darker: #0f0f1a;
            --light: #f0f0f0;
            --accent: #7dd3fc;
            --shadow: rgba(0, 0, 0, 0.2);
            --glow: rgba(125, 211, 252, 0.3);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, var(--darker) 0%, var(--dark) 100%);
            color: var(--light);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Atmospheric Effects */
        .atmosphere {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            background: radial-gradient(circle at 20% 50%, rgba(125, 211, 252, 0.05) 0%, transparent 50%),
                        radial-gradient(circle at 80% 80%, rgba(248, 113, 113, 0.05) 0%, transparent 50%);
            z-index: 1;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            position: relative;
            z-index: 10;
        }

        /* Header */
        header {
            text-align: center;
            padding: 4rem 0 3rem;
            position: relative;
        }

        h1 {
            font-size: 4rem;
            font-weight: 300;
            letter-spacing: -2px;
            background: linear-gradient(45deg, var(--accent), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 1rem;
            text-shadow: 0 0 60px var(--glow);
        }

        .tagline {
            color: var(--accent);
            font-size: 1.3rem;
            opacity: 0.7;
            font-style: italic;
        }

        /* Core Trinity Display */
        .trinity-display {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 2rem;
            margin: 3rem 0;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(125, 211, 252, 0.1);
        }

        .trinity-card {
            text-align: center;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            transition: all 0.3s ease;
            cursor: pointer;
            border: 1px solid transparent;
        }

        .trinity-card:hover {
            transform: translateY(-5px);
            border-color: var(--accent);
            box-shadow: 0 10px 30px var(--shadow);
        }

        .trinity-card.active {
            background: rgba(125, 211, 252, 0.1);
            border-color: var(--accent);
        }

        .trinity-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
        }

        .trinity-title {
            color: var(--accent);
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .trinity-description {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
        }

        /* Main Interface */
        .main-interface {
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 2rem;
            margin-top: 3rem;
        }

        /* Control Panel */
        .control-panel {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(125, 211, 252, 0.2);
            height: fit-content;
            position: sticky;
            top: 2rem;
        }

        .control-section {
            margin-bottom: 2rem;
        }

        .control-section h3 {
            color: var(--accent);
            margin-bottom: 1rem;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .slider-container {
            margin: 1rem 0;
        }

        .slider-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
        }

        input[type="range"] {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.1);
            outline: none;
            -webkit-appearance: none;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--accent);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 10px var(--glow);
        }

        .input-field {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(125, 211, 252, 0.2);
            color: white;
            padding: 0.8rem;
            border-radius: 8px;
            width: 100%;
            margin-top: 0.5rem;
            font-size: 0.95rem;
            transition: all 0.3s ease;
        }

        .input-field:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 15px var(--glow);
            background: rgba(0, 0, 0, 0.5);
        }

        select.input-field {
            cursor: pointer;
        }

        textarea.input-field {
            min-height: 100px;
            resize: vertical;
            font-family: inherit;
        }

        /* Generation Area */
        .generation-area {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(125, 211, 252, 0.2);
            min-height: 600px;
            display: flex;
            flex-direction: column;
        }

        .generation-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(125, 211, 252, 0.1);
        }

        .generation-title {
            font-size: 1.8rem;
            color: var(--accent);
        }

        .generate-button {
            background: linear-gradient(45deg, var(--primary), var(--accent));
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .generate-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .generate-button:hover::before {
            width: 300px;
            height: 300px;
        }

        .generate-button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 30px var(--glow);
        }

        .generate-button:active {
            transform: scale(0.98);
        }

        /* Output Display */
        .output-display {
            flex-grow: 1;
            background: rgba(0, 0, 0, 0.4);
            border-radius: 15px;
            padding: 2rem;
            border: 1px solid rgba(125, 211, 252, 0.1);
            position: relative;
            overflow-y: auto;
            max-height: 600px;
        }

        .output-display::-webkit-scrollbar {
            width: 8px;
        }

        .output-display::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 4px;
        }

        .output-display::-webkit-scrollbar-thumb {
            background: var(--accent);
            border-radius: 4px;
        }

        .output-section {
            margin-bottom: 2rem;
            padding-bottom: 2rem;
            border-bottom: 1px solid rgba(125, 211, 252, 0.1);
            animation: fadeIn 0.5s ease;
        }

        .output-section:last-child {
            border-bottom: none;
        }

        .output-label {
            color: var(--accent);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin-bottom: 0.5rem;
            opacity: 0.7;
        }

        .output-content {
            color: var(--light);
            line-height: 1.8;
            font-size: 1.05rem;
        }

        .output-content em {
            color: var(--accent);
            font-style: italic;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Loading Animation */
        .loading-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        .loading-text {
            color: var(--accent);
            font-size: 1.2rem;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }

        /* Style Presets */
        .preset-buttons {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .preset-btn {
            background: rgba(125, 211, 252, 0.1);
            border: 1px solid rgba(125, 211, 252, 0.3);
            color: var(--accent);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.85rem;
            transition: all 0.3s ease;
        }

        .preset-btn:hover {
            background: rgba(125, 211, 252, 0.2);
            transform: scale(1.05);
        }

        .preset-btn.active {
            background: var(--accent);
            color: var(--dark);
        }

        /* Copy Button */
        .copy-button {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: rgba(125, 211, 252, 0.2);
            border: 1px solid rgba(125, 211, 252, 0.3);
            color: var(--accent);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .copy-button:hover {
            background: rgba(125, 211, 252, 0.3);
            transform: scale(1.05);
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .main-interface {
                grid-template-columns: 1fr;
            }
            
            .control-panel {
                position: static;
            }

            .trinity-display {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .generation-header {
                flex-direction: column;
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="atmosphere"></div>
    
    <div class="container">
        <header>
            <h1>Creative Writing Engine</h1>
            <p class="tagline">"Every story is a conversation between character, plot, and theme"</p>
        </header>

        <!-- Core Trinity Selection -->
        <div class="trinity-display">
            <div class="trinity-card active" id="character-focus" onclick="setFocus('character')">
                <span class="trinity-icon">👤</span>
                <div class="trinity-title">Character</div>
                <div class="trinity-description">The soul of your story - complex beings driven by desire and haunted by the past</div>
            </div>
            <div class="trinity-card" id="plot-focus" onclick="setFocus('plot')">
                <span class="trinity-icon">🌀</span>
                <div class="trinity-title">Plot</div>
                <div class="trinity-description">The journey of transformation - where choices cascade into consequences</div>
            </div>
            <div class="trinity-card" id="theme-focus" onclick="setFocus('theme')">
                <span class="trinity-icon">💭</span>
                <div class="trinity-title">Theme</div>
                <div class="trinity-description">The deeper truth - what the story means beyond what happens</div>
            </div>
        </div>

        <div class="main-interface">
            <!-- Control Panel -->
            <div class="control-panel">
                <div class="control-section">
                    <h3>📖 Story Foundation</h3>
                    
                    <label>Genre Blend</label>
                    <select class="input-field" id="genre">
                        <option value="literary">Literary Fiction</option>
                        <option value="gothic-noir">Gothic Noir</option>
                        <option value="mythic-fantasy">Mythic Fantasy</option>
                        <option value="scifi-horror">Sci-Fi Horror</option>
                        <option value="historical-drama">Historical Drama</option>
                        <option value="psychological">Psychological Thriller</option>
                        <option value="magical-realism">Magical Realism</option>
                    </select>

                    <label style="margin-top: 1rem;">Setting</label>
                    <input type="text" class="input-field" id="setting" 
                           placeholder="e.g., Prehistoric tundra, Decaying plantation, High school reunion">

                    <label style="margin-top: 1rem;">Time Period</label>
                    <input type="text" class="input-field" id="period" 
                           placeholder="e.g., 1930s Chicago, Medieval fantasy realm, 19,000 BC">
                </div>

                <div class="control-section">
                    <h3>⚖️ Story Balance</h3>
                    
                    <div class="slider-container">
                        <div class="slider-label">
                            <span>Character-Driven</span>
                            <span id="balance-value">50%</span>
                            <span>Plot-Driven</span>
                        </div>
                        <input type="range" id="story-balance" min="0" max="100" value="50">
                    </div>

                    <div class="slider-container">
                        <div class="slider-label">
                            <span>Intimate</span>
                            <span id="scope-value">50%</span>
                            <span>Epic</span>
                        </div>
                        <input type="range" id="story-scope" min="0" max="100" value="50">
                    </div>

                    <div class="slider-container">
                        <div class="slider-label">
                            <span>Grounded</span>
                            <span id="surreal-value">30%</span>
                            <span>Surreal</span>
                        </div>
                        <input type="range" id="surreal-level" min="0" max="100" value="30">
                    </div>
                </div>

                <div class="control-section">
                    <h3>🎨 Style Presets</h3>
                    <div class="preset-buttons">
                        <button class="preset-btn" onclick="applyPreset('obsidian')">Pure Obsidian</button>
                        <button class="preset-btn" onclick="applyPreset('arithmancer')">Arithmancer</button>
                        <button class="preset-btn" onclick="applyPreset('doggerland')">Doggerland</button>
                        <button class="preset-btn" onclick="applyPreset('acts')">Acts Between</button>
                        <button class="preset-btn" onclick="applyPreset('march')">We March</button>
                    </div>
                </div>

                <div class="control-section">
                    <h3>🌱 Story Seed</h3>
                    <textarea class="input-field" id="story-seed" 
                              placeholder="Describe your core concept, conflict, or opening image..."></textarea>
                </div>
            </div>

            <!-- Generation Area -->
            <div class="generation-area">
                <div class="generation-header">
                    <h2 class="generation-title">Story Generator</h2>
                    <button class="generate-button" onclick="generateStory()">
                        Generate Story Elements
                    </button>
                </div>

                <div class="output-display" id="output">
                    <div style="text-align: center; padding: 4rem; color: rgba(255, 255, 255, 0.3);">
                        <p style="font-size: 1.2rem; margin-bottom: 1rem;">Your story awaits...</p>
                        <p>Adjust the controls and click Generate to begin</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // State Management
        let currentFocus = 'character';
        let generationCount = 0;

        // Update sliders
        document.getElementById('story-balance').addEventListener('input', function() {
            document.getElementById('balance-value').textContent = this.value + '%';
        });

        document.getElementById('story-scope').addEventListener('input', function() {
            document.getElementById('scope-value').textContent = this.value + '%';
        });

        document.getElementById('surreal-level').addEventListener('input', function() {
            document.getElementById('surreal-value').textContent = this.value + '%';
        });

        // Focus Management
        function setFocus(focus) {
            currentFocus = focus;
            document.querySelectorAll('.trinity-card').forEach(card => {
                card.classList.remove('active');
            });
            document.getElementById(focus + '-focus').classList.add('active');
        }

        // Style Presets
        function applyPreset(preset) {
            const presets = {
                'obsidian': {
                    genre: 'scifi-horror',
                    balance: 60,
                    scope: 80,
                    surreal: 40,
                    setting: 'Decaying plantation with underground hive system',
                    period: 'Alternative 1800s with insectoid slave race'
                },
                'arithmancer': {
                    genre: 'magical-realism',
                    balance: 70,
                    scope: 30,
                    surreal: 60,
                    setting: 'Ancient university filled with forbidden knowledge',
                    period: 'Timeless fantasy realm'
                },
                'doggerland': {
                    genre: 'historical-drama',
                    balance: 40,
                    scope: 20,
                    surreal: 20,
                    setting: 'Harsh prehistoric landscape',
                    period: '19,000 BC'
                },
                'acts': {
                    genre: 'literary',
                    balance: 80,
                    scope: 10,
                    surreal: 10,
                    setting: 'High school gymnasium during reunion',
                    period: 'Contemporary small town'
                },
                'march': {
                    genre: 'mythic-fantasy',
                    balance: 50,
                    scope: 70,
                    surreal: 50,
                    setting: 'Sacred caves and warrior camps',
                    period: 'Mythic past'
                }
            };

            const p = presets[preset];
            if (p) {
                document.getElementById('genre').value = p.genre;
                document.getElementById('story-balance').value = p.balance;
                document.getElementById('balance-value').textContent = p.balance + '%';
                document.getElementById('story-scope').value = p.scope;
                document.getElementById('scope-value').textContent = p.scope + '%';
                document.getElementById('surreal-level').value = p.surreal;
                document.getElementById('surreal-value').textContent = p.surreal + '%';
                document.getElementById('setting').value = p.setting;
                document.getElementById('period').value = p.period;
                
                // Visual feedback
                document.querySelectorAll('.preset-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                event.target.classList.add('active');
            }
        }

        // Story Generation
        function generateStory() {
            const output = document.getElementById('output');
            output.innerHTML = '<div class="loading-container"><div class="loading-text">Weaving narrative threads...</div></div>';
            
            setTimeout(() => {
                const genre = document.getElementById('genre').value;
                const setting = document.getElementById('setting').value || 'an unnamed place between worlds';
                const period = document.getElementById('period').value || 'a time outside of time';
                const seed = document.getElementById('story-seed').value || '';
                const balance = document.getElementById('story-balance').value;
                const scope = document.getElementById('story-scope').value;
                const surreal = document.getElementById('surreal-level').value;
                
                let story = generateStoryElements(genre, setting, period, seed, balance, scope, surreal);
                
                output.innerHTML = `
                    <button class="copy-button" onclick="copyOutput()">Copy</button>
                    ${story}
                `;
                
                generationCount++;
            }, 2000);
        }

        function generateStoryElements(genre, setting, period, seed, balance, scope, surreal) {
            // Character Generation
            const character = generateCharacter(genre, balance, seed);
            
            // Plot Generation  
            const plot = generatePlot(genre, scope, setting, period);
            
            // Theme Generation
            const theme = generateTheme(genre, surreal, seed);
            
            // Synthesis
            const synthesis = generateSynthesis(character, plot, theme);
            
            return `
                <div class="output-section">
                    <div class="output-label">Character Arc</div>
                    <div class="output-content">
                        <p><strong>${character.name}</strong> - ${character.archetype}</p>
                        <p style="margin-top: 1rem;"><em>External Identity:</em> ${character.external}</p>
                        <p><em>Internal Wound:</em> ${character.wound}</p>
                        <p><em>Ghost:</em> ${character.ghost}</p>
                        <p><em>Want:</em> ${character.want}</p>
                        <p><em>Need:</em> ${character.need}</p>
                        <p><em>Voice:</em> "${character.voice}"</p>
                    </div>
                </div>
                
                <div class="output-section">
                    <div class="output-label">Plot Structure</div>
                    <div class="output-content">
                        <p><em>Inciting Incident:</em> ${plot.incident}</p>
                        <p style="margin-top: 1rem;"><em>Progressive Complications:</em> ${plot.complications}</p>
                        <p><em>Crisis Question:</em> ${plot.crisis}</p>
                        <p><em>Climactic Choice:</em> ${plot.climax}</p>
                        <p><em>Resolution:</em> ${plot.resolution}</p>
                    </div>
                </div>
                
                <div class="output-section">
                    <div class="output-label">Thematic Core</div>
                    <div class="output-content">
                        <p><em>Central Question:</em> ${theme.question}</p>
                        <p style="margin-top: 1rem;"><em>Competing Values:</em> ${theme.values}</p>
                        <p><em>Metaphorical System:</em> ${theme.metaphor}</p>
                        <p><em>Ironic Truth:</em> ${theme.irony}</p>
                    </div>
                </div>
                
                <div class="output-section">
                    <div class="output-label">Trinity Synthesis</div>
                    <div class="output-content">
                        <p>${synthesis}</p>
                    </div>
                </div>
                
                <div class="output-section">
                    <div class="output-label">Complete Story</div>
                    <div class="output-content" style="white-space: pre-wrap; line-height: 1.8;">
                        ${generateCompleteStory(character, plot, theme, setting, period, genre, surreal)}
                    </div>
                </div>
            `;
        }

        // Character Generation Engine
        function generateCharacter(genre, balance, seed) {
            const archetypes = {
                'literary': ['The nostalgic dreamer', 'The quiet observer', 'The reluctant participant', 'The gentle cynic'],
                'gothic-noir': ['The broken idealist', 'The corrupted innocent', 'The weary detective', 'The elegant monster'],
                'mythic-fantasy': ['The reluctant hero', 'The burden bearer', 'The last of their kind', 'The bridge between worlds'],
                'scifi-horror': ['The unwilling prophet', 'The evolved outsider', 'The contaminated pure', 'The symbiotic host'],
                'historical-drama': ['The survivor', 'The witness', 'The exile', 'The keeper of traditions'],
                'psychological': ['The unreliable narrator', 'The fractured self', 'The obsessive', 'The manipulator'],
                'magical-realism': ['The gifted mundane', 'The cursed blessed', 'The rememberer', 'The threshold walker']
            };
            
            const names = generateName(genre);
            const archetype = archetypes[genre][Math.floor(Math.random() * archetypes[genre].length)];
            
            return {
                name: names,
                archetype: archetype,
                external: generateExternal(archetype),
                wound: generateWound(),
                ghost: generateGhost(),
                want: generateWant(),
                need: generateNeed(),
                voice: generateCharacterVoice(archetype)
            };
        }

        // Plot Generation Engine
        function generatePlot(genre, scope, setting, period) {
            const incidents = {
                'literary': 'A letter arrives that changes everything they believed about the past',
                'gothic-noir': 'A body is discovered that shouldn\'t exist',
                'mythic-fantasy': 'The old ways fail for the first time in memory',
                'scifi-horror': 'They realize they are no longer entirely human',
                'historical-drama': 'The world they knew begins to end',
                'psychological': 'Someone from their past appears with an impossible claim',
                'magical-realism': 'The impossible becomes mundane, the mundane becomes impossible'
            };
            
            return {
                incident: incidents[genre] || 'Something shifts in the fabric of their reality',
                complications: generateComplications(scope),
                crisis: generateCrisis(),
                climax: generateClimax(scope),
                resolution: generateResolution()
            };
        }

        // Theme Generation Engine
        function generateTheme(genre, surreal, seed) {
            const questions = {
                'literary': 'Can we ever truly know another person, or are we forever trapped in our own perception?',
                'gothic-noir': 'Is redemption possible, or do our sins define us eternally?',
                'mythic-fantasy': 'What do we owe to tradition versus what we owe to progress?',
                'scifi-horror': 'At what point does evolution become extinction?',
                'historical-drama': 'How do we honor the past without being imprisoned by it?',
                'psychological': 'Where does the self end and the other begin?',
                'magical-realism': 'Is magic just another word for what we don\'t understand?'
            };
            
            return {
                question: questions[genre],
                values: generateValues(),
                metaphor: generateMetaphor(surreal),
                irony: generateIrony()
            };
        }

        // Synthesis Generator
        function generateSynthesis(character, plot, theme) {
            const syntheses = [
                `The story explores how ${character.name}'s ${character.wound} becomes the very key to answering "${theme.question}" The ${plot.incident} forces them to confront not just external conflict but the internal contradictions that define them. Through ${plot.complications}, they discover that what they want (${character.want}) and what they need (${character.need}) are in direct opposition. The climactic choice—${plot.climax}—becomes not just a plot point but a thematic statement about ${theme.values}. In the end, ${theme.irony}, suggesting that ${plot.resolution}`,
                
                `At its heart, this is a story about ${character.archetype} learning that ${theme.irony}. ${character.name} begins believing ${character.want}, but through ${plot.complications}, discovers ${character.need}. The central metaphor of ${theme.metaphor} reflects how ${plot.crisis} The resolution—${plot.resolution}—answers ${theme.question} not with certainty but with earned wisdom.`,
                
                `The narrative tension emerges from the collision between ${character.name}'s ghost (${character.ghost}) and the immediate crisis of ${plot.incident}. As ${plot.complications}, the story reveals that ${theme.values} cannot coexist peacefully. The metaphorical system of ${theme.metaphor} illuminates how ${character.wound} paradoxically becomes their greatest strength. When faced with ${plot.climax}, the choice reveals that ${theme.irony}`
            ];
            
            return syntheses[Math.floor(Math.random() * syntheses.length)];
        }

        // Helper Generation Functions
        function generateName(genre) {
            const names = {
                'literary': ['Lionel', 'Claire', 'Rebecca', 'Theodore', 'Katherine', 'Arthur', 'Margaret', 'Samuel'],
                'gothic-noir': ['Lawrence', 'Ashley', 'Sebastian', 'Eleanor', 'Marcus', 'Vera', 'Silas', 'Ophelia'],
                'mythic-fantasy': ['Natu', 'Venru', 'Khari', 'Kiara', 'Isak', 'Tawnree', 'Amamn', 'Douka'],
                'scifi-horror': ['Subject Seven', 'Dr. Kepler', 'Unit Sigma', 'The Architect', 'Patient Zero'],
                'historical-drama': ['Thomas', 'Sarah', 'William', 'Elizabeth', 'James', 'Mary', 'Charles', 'Agnes'],
                'psychological': ['The Narrator', 'X', 'The Other', 'Subject', 'Patient', 'Observer'],
                'magical-realism': ['Tiberius', 'Alasaea', 'Jacoby', 'Elphira', 'Monette', 'Orner', 'Sabra']
            };
            
            const nameList = names[genre] || names['literary'];
            return nameList[Math.floor(Math.random() * nameList.length)];
        }

        function generateExternal(archetype) {
            const externals = [
                'A respected position that masks inner turmoil',
                'A reputation that no longer fits who they\'ve become',
                'A role they never chose but cannot escape',
                'A facade of competence hiding deep inadequacy',
                'A public persona at war with private truth'
            ];
            return externals[Math.floor(Math.random() * externals.length)];
        }

        function generateWound() {
            const wounds = [
                'The inability to forgive themselves for a past failure',
                'The loss of someone who defined their world',
                'A betrayal that shattered their ability to trust',
                'The discovery that their life\'s work was built on lies',
                'The moment they chose survival over integrity',
                'A childhood trauma that echoes in every relationship',
                'The weight of inheriting someone else\'s sins'
            ];
            return wounds[Math.floor(Math.random() * wounds.length)];
        }

        function generateGhost() {
            const ghosts = [
                'A father who demanded perfection and got destruction',
                'A child whose innocence was lost too soon',
                'A lover who knew them before they broke',
                'A mentor who saw their potential and died disappointed',
                'A sibling who took the blame for their crime',
                'A friend who warned them but wasn\'t heard',
                'An enemy who understood them better than anyone'
            ];
            return ghosts[Math.floor(Math.random() * ghosts.length)];
        }

        function generateWant() {
            const wants = [
                'To be seen as they wish they were',
                'To return to a moment before everything changed',
                'To prove everyone wrong about them',
                'To escape the prison of their own making',
                'To find someone who understands without explanation',
                'To achieve the success that will finally bring peace',
                'To punish those responsible for their pain'
            ];
            return wants[Math.floor(Math.random() * wants.length)];
        }

        function generateNeed() {
            const needs = [
                'To accept who they truly are',
                'To let go of what cannot be changed',
                'To forgive themselves',
                'To embrace uncertainty',
                'To stop running from connection',
                'To find meaning beyond achievement',
                'To choose creation over destruction'
            ];
            return needs[Math.floor(Math.random() * needs.length)];
        }

        function generateCharacterVoice(archetype) {
            const voices = [
                'I\'ve spent so long pretending that I\'ve forgotten what\'s real.',
                'Every choice I make seems to hurt someone I love.',
                'The past isn\'t dead—it\'s not even past.',
                'I can feel myself becoming what I swore I\'d never be.',
                'There\'s a stranger living in my skin, and I think it might be me.',
                'I keep looking for redemption in all the wrong places.',
                'The truth is a luxury I can no longer afford.',
                'Sometimes I wonder if the world broke me, or if I broke myself.',
                'Every door I open seems to lead back to the same room.',
                'I\'m not sure if I\'m the hero or the villain of this story.'
            ];
            return voices[Math.floor(Math.random() * voices.length)];
        }

        function generateComplications(scope) {
            const complications = scope > 50 
                ? 'Alliances shift like sand, empires rise and fall, and the very fabric of society begins to unravel as ancient powers awaken'
                : 'Small betrayals accumulate into devastating revelations, intimate secrets become weapons, and trust becomes impossible';
            return complications;
        }

        function generateCrisis() {
            const crises = [
                'Will they sacrifice their soul to save their body?',
                'Can they destroy what they love to preserve what they believe?',
                'Must they become the monster to defeat the monster?',
                'Will they choose comfortable lies or devastating truth?',
                'Can they accept help from the person who destroyed them?',
                'Will they repeat the cycle or break it at great cost?'
            ];
            return crises[Math.floor(Math.random() * crises.length)];
        }

        function generateClimax(scope) {
            const climaxes = scope > 50
                ? 'The fate of nations hinges on a single choice between irreconcilable values'
                : 'In a quiet room, with no witnesses, they must decide who they really are';
            return climaxes;
        }

        function generateResolution() {
            const resolutions = [
                'Victory and defeat become indistinguishable',
                'They get what they need by losing what they wanted',
                'The ending is a beginning they never saw coming',
                'Peace comes not from winning but from acceptance',
                'They save everyone except themselves',
                'The true enemy was never external',
                'They become what they were meant to be, not what they wanted to be'
            ];
            return resolutions[Math.floor(Math.random() * resolutions.length)];
        }

        function generateValues() {
            const values = [
                'Justice and mercy',
                'Truth and kindness',
                'Progress and tradition',
                'Individual and collective',
                'Freedom and security',
                'Love and duty',
                'Survival and integrity'
            ];
            return values[Math.floor(Math.random() * values.length)];
        }

        function generateMetaphor(surreal) {
            const metaphors = surreal > 50
                ? [
                    'Reality as a decomposing corpse that still dreams',
                    'Memory as water that drowns and sustains simultaneously',
                    'Identity as smoke that takes the shape of its container',
                    'Time as a serpent eating its own tail',
                    'Consciousness as light refracted through broken glass'
                  ]
                : [
                    'The past as a house with locked rooms',
                    'Relationships as bridges built while burning',
                    'Truth as medicine that poisons before it heals',
                    'Growth as controlled demolition',
                    'Love as gravity—invisible but inescapable'
                  ];
            return metaphors[Math.floor(Math.random() * metaphors.length)];
        }

        function generateIrony() {
            const ironies = [
                'The very thing that saves us is what destroys us',
                'We become what we hate by fighting what we fear',
                'The cure is worse than the disease, but necessary',
                'Victory requires accepting defeat',
                'To find ourselves, we must lose everything',
                'The greatest strength comes from admitting weakness',
                'We can only connect by accepting our isolation'
            ];
            return ironies[Math.floor(Math.random() * ironies.length)];
        }

        function generateOpening(setting, period, character, surreal) {
            const openings = [
                `The ${setting} had not changed, yet everything about it seemed foreign to ${character}. Perhaps it was the light—too sharp, too revealing—or perhaps it was the weight of knowing what was about to unfold. In ${period}, such places held secrets like tombs held bodies: permanently, silently, waiting for someone foolish enough to dig.`,
                
                `${character} found the first body where the old maps said water should be. The ${setting} stretched endlessly, a canvas of ${period} painted in shades of decay and stubborn life. The corpse wasn't human—nothing in this place truly was anymore—but it had been once, and that was enough to make ${character}'s hands shake as they reached for what it clutched in its transformed fingers.`,
                
                `Rain fell on the ${setting} like a judgment delayed too long. ${character} stood at the threshold, neither inside nor out, caught in that liminal space where ${period} met eternity. Behind: everything they had built. Ahead: everything they feared. The choice had already been made, somewhere in the depths of dreams, but the body hadn't caught up to what the soul already knew.`,
                
                `In the ${setting}, during the dying days of ${period}, ${character} discovered that memory could bleed. Not metaphorically—though that too—but literally, pooling in corners where the past had worn through the present's thin fabric. They pressed their hand to the wall and felt yesterday's warmth, tomorrow's cold, and understood finally why this place had been abandoned.`,
                
                `The last honest conversation in the ${setting} happened before ${character} arrived, back when ${period} still believed in the possibility of truth. Now, standing in the ruins of what had been, ${character} practiced the lies that would keep everyone alive. The first lie: that survival mattered. The second: that they were still themselves. The third—the kindest—that there would be a fourth.`
            ];
            
            const index = Math.min(Math.floor(surreal / 20), openings.length - 1);
            return openings[index];
        }

        // Copy Function
        function copyOutput() {
            const output = document.querySelector('.output-display').innerText;
            navigator.clipboard.writeText(output);
            event.target.textContent = 'Copied!';
            setTimeout(() => {
                event.target.textContent = 'Copy';
            }, 2000);
        }
    </script>
</body>
</html>
